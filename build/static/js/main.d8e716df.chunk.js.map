{"version":3,"sources":["index.js"],"names":["Scene","React","memo","urls","svgs","useLoader","SVGLoader","shapes","useMemo","map","paths","flatMap","path","index","toShapes","shape","color","fillOpacity","userData","style","useState","page","setPage","useEffect","setInterval","i","length","transitions","useTransition","item","uuid","from","rotation","position","opacity","enter","leave","order","config","mass","tension","friction","trail","lazy","unique","reset","intensity","group","Math","PI","key","props","mesh","interpolate","x","y","z","meshPhongMaterial","attach","o","depthWrite","transparent","args","ReactDOM","render","className","invalidateFrameloop","camera","fov","near","far","onCreated","lookAt","Vector3","fallback","document","getElementById"],"mappings":"uSAQMA,G,MAAQC,IAAMC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACpBC,EAAOC,YAAUC,IAAWH,GAC5BI,EAASC,mBACb,kBACEJ,EAAKK,KAAI,qBAAGC,MACJC,SAAQ,SAACC,EAAMC,GAAP,OACZD,EAAKE,UAAS,GAAML,KAAI,SAAAM,GAAK,MAAK,CAAEA,QAAOC,MAAOJ,EAAKI,MAAOC,YAAaL,EAAKM,SAASC,MAAMF,YAAaJ,oBAGlH,CAACT,IATkC,EAYbgB,mBAAS,GAZI,mBAY9BC,EAZ8B,KAYxBC,EAZwB,KAarCC,qBAAU,WAAWC,aAAY,kBAAMF,GAAQ,SAAAG,GAAC,OAAKA,EAAI,GAAKtB,EAAKuB,YAAS,OAAO,IAEnF,IAAMC,EAAcC,YAAcrB,EAAOc,IAAO,SAAAQ,GAAI,OAAIA,EAAKd,MAAMe,OAAM,CACvEC,KAAM,CAAEC,SAAU,CAAC,EAAG,GAAK,GAAIC,SAAU,CAAC,EAAG,EAAG,GAAIC,QAAS,GAC7DC,MAAO,CAAEH,SAAU,CAAC,EAAG,EAAG,GAAIC,SAAU,CAAC,EAAG,EAAG,GAAIC,QAAS,GAC5DE,MAAO,CAAEJ,SAAU,CAAC,GAAI,GAAK,GAAIC,SAAU,CAAC,EAAG,EAAG,GAAIC,QAAS,GAC/DG,MAAO,CAAC,QAAS,QAAS,UAC1BC,OAAQ,CAAEC,KAAM,EAAGC,QAAS,IAAKC,SAAU,KAC3CC,MAAO,EACPC,MAAM,EACNC,QAAQ,EACRC,OAAO,IAET,OACE,oCACE,kCAAcC,UAAW,KACzB,+BAAWA,UAAW,GAAKb,SAAU,CAAC,IAAK,IAAK,OAChD,kBAAC,IAAEc,MAAH,CAASd,SAAU,CAAC,IAAK,IAAKZ,GAAOW,SAAU,CAAC,EAAG,EAAGgB,KAAKC,KACxDtB,EAAYlB,KAAI,oBAAGoB,KAAQd,EAAX,EAAWA,MAAOC,EAAlB,EAAkBA,MAAOC,EAAzB,EAAyBA,YAAaJ,EAAtC,EAAsCA,MAASqC,EAA/C,EAA+CA,IAA/C,IAAoDC,MAASjB,EAA7D,EAA6DA,QAASD,EAAtE,EAAsEA,SAAUD,EAAhF,EAAgFA,SAAhF,OACf,kBAAC,IAAEoB,KAAH,CAAQF,IAAKA,EAAKlB,SAAUA,EAAUC,SAAUA,EAASoB,aAAY,SAACC,EAAGC,EAAGC,GAAP,MAAa,CAACF,EAAGC,EAAGC,EAAI3C,OAC3F,kBAAC,IAAE4C,kBAAH,CACEC,OAAO,WACP1C,MAAOA,EACPkB,QAASA,EAAQmB,aAAY,SAAAM,GAAC,OAAIA,EAAI1C,KACtC2C,YAAY,EACZC,aAAW,IAEb,yCAAqBH,OAAO,WAAWI,KAAM,CAAC/C,eAuB1DgD,IAASC,OAAO,mBAfhB,WACE,OACE,yBAAKC,UAAU,QACb,kBAAC,IAAD,CACEC,qBAAmB,EACnBC,OAAQ,CAAEC,IAAK,GAAInC,SAAU,CAAC,EAAG,EAAG,KAAMoC,KAAM,GAAKC,IAAK,KAC1DC,UAAW,qBAAGJ,OAAoBK,OAAO,IAAIC,UAAQ,EAAG,EAAG,MAC3D,kBAAC,WAAD,CAAUC,SAAU,MAClB,kBAAC1E,EAAD,CAAOG,KAAM,CAAC,SAAU,SAAU,SAAU,SAAU,SAAU,iBAO1D,MAASwE,SAASC,eAAe,U","file":"static/js/main.d8e716df.chunk.js","sourcesContent":["import ReactDOM from 'react-dom'\nimport React, { Suspense, useState, useEffect, useMemo } from 'react'\nimport { Vector3 } from 'three'\nimport { SVGLoader } from 'three/examples/jsm/loaders/SVGLoader'\nimport { Canvas, useLoader } from 'react-three-fiber'\nimport { useTransition, a } from 'react-spring/three'\nimport './styles.css'\n\nconst Scene = React.memo(({ urls }) => {\n  const svgs = useLoader(SVGLoader, urls)\n  const shapes = useMemo(\n    () =>\n      svgs.map(({ paths }) =>\n        paths.flatMap((path, index) =>\n          path.toShapes(true).map(shape => ({ shape, color: path.color, fillOpacity: path.userData.style.fillOpacity, index }))\n        )\n      ),\n    [svgs]\n  )\n\n  const [page, setPage] = useState(0)\n  useEffect(() => void setInterval(() => setPage(i => (i + 1) % urls.length), 3000), [])\n\n  const transitions = useTransition(shapes[page], item => item.shape.uuid, {\n    from: { rotation: [0, 0.2, 0], position: [0, 0, 0], opacity: 0 },\n    enter: { rotation: [0, 0, 0], position: [0, 0, 0], opacity: 1 },\n    leave: { rotation: [0, -0.2, 0], position: [0, 0, 0], opacity: 0 },\n    order: ['leave', 'enter', 'update'],\n    config: { mass: 4, tension: 500, friction: 100 },\n    trail: 5,\n    lazy: true,\n    unique: true,\n    reset: true\n  })\n  return (\n    <>\n      <ambientLight intensity={0.5} />\n      <spotLight intensity={0.5} position={[300, 300, 4000]} />\n      <a.group position={[300, 190, page]} rotation={[0, 0, Math.PI]}>\n        {transitions.map(({ item: { shape, color, fillOpacity, index }, key, props: { opacity, position, rotation } }) => (\n          <a.mesh key={key} rotation={rotation} position={position.interpolate((x, y, z) => [x, y, z + index])}>\n            <a.meshPhongMaterial\n              attach=\"material\"\n              color={color}\n              opacity={opacity.interpolate(o => o * fillOpacity)}\n              depthWrite={false}\n              transparent\n            />\n            <shapeBufferGeometry attach=\"geometry\" args={[shape]} />\n          </a.mesh>\n        ))}\n      </a.group>\n    </>\n  )\n})\n\nfunction App() {\n  return (\n    <div className=\"main\">\n      <Canvas\n        invalidateFrameloop\n        camera={{ fov: 90, position: [0, 0, 350], near: 0.1, far: 20000 }}\n        onCreated={({ camera }) => camera.lookAt(new Vector3(0, 0, 0))}>\n        <Suspense fallback={null}>\n          <Scene urls={['/1.svg', '/2.svg', '/4.svg', '/5.svg', '/6.svg', '/7.svg']} />\n        </Suspense>\n      </Canvas>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}